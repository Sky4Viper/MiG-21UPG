<PropertyList  include="MiG-21UPG-bombableinclude.xml">

	<!-- Model -->
    
	<path>MiG-21UPG.ac</path>
	<offsets>
		<pitch-deg>-3</pitch-deg>   
		<heading-deg>0</heading-deg>
		<roll-deg>0</roll-deg>
		<x-m>0</x-m>
		<y-m>0</y-m>
		<z-m>0.15</z-m>
	</offsets>
	
	<model>
		<usage>interior</usage>
		<path>Aircraft/MiG-21UPG/Models/Cockpit.xml</path>
	</model>
	
    <!-- Rembrandt auto switching for glass -->
	
    <effect>
        <inherits-from>Effects/model-transparent</inherits-from>
        <condition>
            <greater-than>
                <property>sim/multiplay/generic/float[6]</property>
                <value>9</value>
            </greater-than>
            <property>/sim/rendering/rembrandt/enabled</property>
       	 	</condition>
			<object-name>glass</object-name>
			<object-name>canopy_glass</object-name>
    </effect>
	
	<!-- Lights -->
	
	<model>
		<path>Aircraft/MiG-21UPG/Models/Lights/LightPack.xml</path>
	</model>
	
    <nasal>
      <load><![CDATA[
  var root = cmdarg();
  var rootindex = root.getIndex();
  var mpPath = "/ai/models/multiplayer["~ rootindex ~"]/";

  var lightsPath = mpPath~"lightpack/"; #path to the property node, where all internal values are placed

  props.globals.initNode(mpPath~"sim/is-MP-Aircraft", 1, "BOOL");
      
  srand();
  #wherever you want to add randomization of time, use something like:  + rand()*0.05-0.025 (included by default where appropriate)


  #list of switches for lights - if you don't intend to use some light, assign it nil value instead, like whateverSwitch = nil; and you don't need to care about anything else
  #IMPORTANT: don't put / on the start of the string, it's already included in the mpPath property
  var navSwitch = mpPath~"controls/lighting/nav-lights-switch";
  var beaconSwitch = mpPath~"controls/lighting/beacon-switch";
  var strobeSwitch = mpPath~"controls/lighting/strobe-switch";
  var landingSwitch = mpPath~"controls/lighting/landing-lights-switch";
  var taxiSwitch = mpPath~"controls/lighting/taxi-light-switch";
  var probeSwitch = mpPath~"controls/lighting/probe-light-switch";
  var whiteSwitch = mpPath~"controls/lighting/white-light-switch";

  #switch this from 1 to 0 if you want to use advanced cyclical fading animation of the the nav lights instead of being stable on when the switch is on
  navStillOn = 1;


  #I need to set listener on some MP transferred properties; this doesn't seem to work well sometimes, so I mirror them to the original location on any change
  #This also simplifies work as I can use almost the same code for MP as is the local Nasal. Furthermore, I can use meaningful property names in the model XML files instead of referencing the MP properties. 
  var mpVar = {
  	new: func(propIn, propOut) {
  		var m = { parents: [mpVar] };
  		m.propIn = propIn;
  		m.propOut = propOut;
  		if(propIn==nil) return m;
  		m.value = getprop(propIn);
  		setprop(propOut, m.value);
  		return m;
  	},
  	check: func {
  		if(me.propIn==nil) return;
  		var newValue = getprop(me.propIn);
  		if(newValue != me.value) {
  			setprop(me.propOut, newValue);
  			me.value = newValue;
  			#print("value of "~me.propOut~" changed: "~newValue);
  		}
  	},
  };
  #init any property copy object needed in this array (anything you need to transfer over MP, but you are using the original paths in your xmls)
  #also used for properties you are using a listener on, or properties which you maybe want to manipulate during the <unload> 
  #if you're just using the pack, change the values according to the MP bindings in the -set.xml file
  #you don't need to delete the entries if the path is nil - it gets skipped automatically and the MP path is just ignored
  var mirrorValues = [
  	mpVar.new(mpPath~"sim/multiplay/generic/int[7]", mpPath~"sim/crashed"),
  	mpVar.new(mpPath~"sim/multiplay/generic/int[0]", navSwitch),
  	mpVar.new(mpPath~"sim/multiplay/generic/int[1]", beaconSwitch),
  	mpVar.new(mpPath~"sim/multiplay/generic/int[1]", strobeSwitch),
  	mpVar.new(mpPath~"sim/multiplay/generic/int[2]", landingSwitch),
  	mpVar.new(mpPath~"sim/multiplay/generic/int[3]", taxiSwitch),
  	mpVar.new(mpPath~"sim/multiplay/generic/int[3]", probeSwitch),
  	mpVar.new(mpPath~"sim/multiplay/generic/int[0]", whiteSwitch),
  ];
  #loop at the default MP transfer frequency (10Hz)
  var mirrorTimer = maketimer(0.1, func {
  	foreach(var mir; mirrorValues) {
  		mir.check();
  	}
  });
  mirrorTimer.start();



  #### NAV LIGHTS ####

  #class for a periodic fade in/out animation - for flashing, use rather standard aircraft.light.new(), as in Beacon and Strobe section
  var lightCycle = {
  	#constructor
  	new: func(propSwitch, propOut) {
  		m = { parents: [lightCycle] };
  		props.globals.initNode(propOut, 0, "DOUBLE");
  		props.globals.initNode(propSwitch, 1, "BOOL");
  		m.fadeIn = 0.4 + rand()*0.05-0.025; #fade in time
  		m.fadeOut = 0.4 + rand()*0.05-0.025; #fade out time
  		m.stayOn = 1.5 + rand()*0.05-0.025; #stable on period
  		m.stayOff = 1 + rand()*0.05-0.025; #stable off period
  		m.turnOff = 0.12; #fade out time when turned off
  		m.phase = 0; #phase to be run on next timer call: 0 -> fade in, 1 -> stay on, 2 -> fade out, 3 -> stay off
  		m.cycleTimer = maketimer(0.1, func {
  			if(getprop(propSwitch)) {
  				if(m.phase == 0) {
  					interpolate(propOut, 1, m.fadeIn);
  					m.phase = 1;
  					m.cycleTimer.restart(m.fadeIn);
  				}
  				else if(m.phase == 1){
  					m.phase = 2;
  					m.cycleTimer.restart(m.stayOn);
  				}
  				else if(m.phase == 2){
  					interpolate(propOut, 0, m.fadeOut);
  					m.phase = 3;
  					m.cycleTimer.restart(m.fadeOut);
  				}
  				else if(m.phase == 3){
  					m.phase = 0;
  					m.cycleTimer.restart(m.stayOff);
  				}
  			}
  			else {
  				interpolate(propOut, 0, m.turnOff); #kills any currently ongoing interpolation
  				m.phase = 0;
  			}
  		});
  		m.cycleTimer.singleShot = 1;
  		if(propSwitch==nil) {
  			m.listen = nil;
  			return m;
  		}
  		m.listen = setlistener(propSwitch, func{m.cycleTimer.restart(0);}); #handle switch changes
  		m.cycleTimer.restart(0); #start the looping
  		return m;
  	},
  	#destructor
  	del: func {
  		if(me.listen!=nil) removelistener(me.listen);
  		me.cycleTimer.stop();
  	},
  };

  #By default, the switch property is initialized to 1 (only if no value is already assigned). Don't change the class implementation! To override this, set the property manually. You don't need to care if any other code already does it for you. 
  var navLights = nil;
  if(!navStillOn) {
  	navLights = lightCycle.new(navSwitch, lightsPath~"nav-lights-intensity");
  	### Uncomment and tune those to customize times ###
  	#navLights.fadeIn = 0.4; #fade in time 
  	#navLights.fadeOut = 0.4; #fade out time
  	#navLights.stayOn = 3 + rand()*0.05-0.025; #stable on period
  	#navLights.stayOff = 0.6; #stable off period
  	#navLights.turnOff = 0.12; #fade out time when turned off
  }


  ### BEACON ###
  var beacon = nil;
  if(beaconSwitch!=nil) {
  	props.globals.initNode(beaconSwitch, 1, "BOOL");
  	beacon = aircraft.light.new(lightsPath~"beacon-state", 
  		[0.0, 1.0 + rand()*0.05-0.025], beaconSwitch);
  }
	
	
  ### STROBE ###
  var strobe = nil;
  if(strobeSwitch!=nil) {
  	props.globals.initNode(strobeSwitch, 1, "BOOL");
  	strobe = aircraft.light.new(lightsPath~"strobe-state", 
  		[0.0, 0.87 + rand()*0.05-0.025], strobeSwitch);
  }


  ### LIGHT FADING ###

  #class for controlling fade in/out behavior - propIn is a control property (handled as a boolean) and propOut is interpolated
  #all light brightness animations in xmls depend on propOut (Rembrandt brightness, material emission, flares transparency, ...)
  var lightFadeInOut = {
  	#constructor
  	new: func(propSwitch, propOut) {
  		m = { parents: [lightFadeInOut] };
  		m.fadeIn = 0.3; #some sane defaults
  		m.fadeOut = 0.4;
  		if(propSwitch==nil) {
  			m.listen = nil;
  			return m;
  		}
  		props.globals.initNode(propSwitch, 1, "BOOL");
  		m.isOn = getprop(propSwitch);
  		props.globals.initNode(propOut, m.isOn, "DOUBLE");
  		m.listen = setlistener(propSwitch, 
  			func {
  				if(m.isOn and !getprop(propSwitch)) {
  					interpolate(propOut, 0, m.fadeOut);
  					m.isOn = 0;
  				}
  				if(!m.isOn and getprop(propSwitch)) {
  					interpolate(propOut, 1, m.fadeIn);
  					m.isOn = 1;
  				}
  			}
  		);
  		return m;
  	},
  	#destructor
  	del: func {
  		if(me.listen!=nil) removelistener(me.listen);
  	},
  };

  fadeLanding = lightFadeInOut.new(landingSwitch, lightsPath~"landing-lights-intensity");
  fadeTaxi = lightFadeInOut.new(taxiSwitch, lightsPath~"taxi-light-intensity");
  fadeProbe = lightFadeInOut.new(probeSwitch, lightsPath~"probe-light-intensity");
  fadeWhite = lightFadeInOut.new(whiteSwitch, lightsPath~"white-light-intensity");
  if(navStillOn) {
  	navLights = lightFadeInOut.new(navSwitch, lightsPath~"nav-lights-intensity");
  	navLights.fadeIn = 0.1;
  	navLights.fadeOut = 0.12;
  }
  #manipulate times if defaults don't fit your needs:
  #fadeLanding.fadeIn = 0.5;
  #fadeLanding.fadeOut = 0.8;


  ### the rest of your model load embedded Nasal code ###

      ]]>
      </load>
      <unload>
        stopFire();
        disintegrated = 0;
        removelistener(listenCrash);
      
        #prevent multiple timers and listeners from running and fighting on next connect
        #cleanly destroy MP property mirroring
        mirrorTimer.stop();
        mirrorTimer = nil;
        mirrorValues = nil;
      
        #cleanly destroy nav lights
        if(navStillOn) {
        	navLights.del();
        }
        else {
        	if(navSwitch!=nil) setprop(navSwitch, 0);
        	navLights.del();
        	if(navSwitch!=nil) navLights.cycleTimer = nil;
        	navLights = nil;
        }
      
        #cleanly destroy beacon
        if(beaconSwitch!=nil) setprop(beaconSwitch, 0);
        beacon.del();
        beacon = nil;
      
        #cleanly destroy strobe
        if(strobeSwitch!=nil) setprop(strobeSwitch, 0);
        strobe.del();
        strobe = nil;
      
        #cleanly destroy light fade in/out animation objects
        fadeLanding.del();
        fadeTaxi.del();
        fadeProbe.del();
        fadeWhite.del();
      
        ### the rest of your model unload embedded Nasal code ###
      </unload>
    </nasal>
	
	<!-- Shaders -->

  <!--<animation>
    <type>shader</type>
    <shader>chrome</shader>
    <texture>Aircraft/Generic/Effects/glass_shader.png</texture>
    <object-name>glass</object-name>
    <object-name>canopy_glass</object-name>
  </animation>
	
	<animation>
		<type>noshadow</type>
		<object-name>glass</object-name>
		<object-name>canopy_glass</object-name>
	</animation>-->
  
  <effect>
		<inherits-from>Aircraft/MiG-21UPG/Models/Effects/Fx/exterior-glass</inherits-from>
		<object-name>glass</object-name>
		<object-name>canopy_glass</object-name>
	</effect>
	
    <!-- Parts invisible from internally -->
    
    <animation>
        <type>select</type>
		<object-name>glass</object-name>
		<object-name>canopy_glass</object-name>
		<condition>
            <not>
                <property>sim/current-view/internal</property>
            </not>
        </condition>
    </animation>
	
	<!-- MP sound -->

	<sound>
		<path>Aircraft/MiG-21UPG/Sounds/MP-Sound.xml</path>
	</sound>

  <!-- Payload -->

  <model>
    <path>Aircraft/MiG-21UPG/Models/Payload/Payload.xml</path>
  </model>

  <!-- Pylons  -->

  <model>
    <path>Aircraft/MiG-21UPG/Models/Payload/Pylons.xml</path>
  </model>

  <model>
    <path>Aircraft/MiG-21UPG/Models/Exhausts/exhausts.xml</path>
    <offsets>
      <x-m>5.48 </x-m>
      <y-m>0.00000 </y-m>
      <z-m>0.18 </z-m>
    </offsets>
  </model>
  
	<!-- Effects -->
	
	<model>
		<name>Effects</name>
		<path>Aircraft/MiG-21UPG/Models/Effects.xml</path>
	</model>

  <!--<effect>
    <inherits-from>Aircraft/Generic/Effects/Fuselagereflect</inherits-from>
    <object-name>left_inner_strut</object-name>
    <object-name>left_strut</object-name>
    <object-name>leftd_strut</object-name>
    <object-name>left_scissor</object-name>
    <object-name>right_inner_strut</object-name>
    <object-name>right_strut</object-name>
    <object-name>rightd_strut</object-name>
    <object-name>front_strut</object-name>
    <object-name>frontd_strut</object-name>
    <object-name>right_scissor</object-name>
    <object-name>left-abhydro</object-name>
    <object-name>right-abhydro</object-name>
    <object-name>abhydro</object-name>
    <object-name>nozzle</object-name>
  </effect>-->

	<!-- Livery -->
    
	<nasal>
		<load>
      var livery_update = aircraft.livery_update.new("Aircraft/MiG-21UPG/Models/Liveries");
    </load>
		<unload>
			livery_update.stop();
		</unload>
	</nasal>

	<animation>
		<type>material</type>
		<object-name>spoiler</object-name>
		<object-name>cone</object-name>
		<object-name>hull</object-name>
		<object-name>canopy</object-name>
    <object-name>arch_rub</object-name>
		<object-name>left_ventral_air_brake</object-name>
		<object-name>right_ventral_air_brake</object-name>
		<object-name>central_air_brake</object-name>
		<object-name>left_gill</object-name>
		<object-name>left_back_gill</object-name>
		<object-name>right_gill</object-name>
		<object-name>right_back_gill</object-name>
		<object-name>rudder</object-name>
		<object-name>hstab</object-name>
		<object-name>right_elevator</object-name>
		<object-name>left_elevator</object-name>
		<object-name>right_door</object-name>
		<object-name>left_door</object-name>
		<object-name>right_inner_door</object-name>
		<object-name>left_inner_door</object-name>
		<object-name>right_outer_door</object-name>
		<object-name>left_outer_door</object-name>
		<object-name>right_outer_door_up</object-name>
		<object-name>right_outer_door_down</object-name>
		<object-name>left_outer_door_up</object-name>
		<object-name>left_outer_door_down</object-name>
		<object-name>back_right_door</object-name>
		<object-name>back_left_door</object-name>
		<object-name>wings</object-name>
		<object-name>right_flap</object-name>
		<object-name>left_flap</object-name>
		<object-name>right_aileron</object-name>
		<object-name>left_aileron</object-name>
		<object-name>pylons</object-name>
		<object-name>nose_wheel</object-name>
		<object-name>left_wheel</object-name>
		<object-name>right_wheel</object-name>
    <object-name>left_inner_strut</object-name>
    <object-name>left_strut</object-name>
    <object-name>leftd_strut</object-name>
    <object-name>left_scissor</object-name>
    <object-name>right_inner_strut</object-name>
    <object-name>right_strut</object-name>
    <object-name>rightd_strut</object-name>
    <object-name>front_strut</object-name>
    <object-name>frontd_strut</object-name>
    <object-name>right_scissor</object-name>
    <object-name>countermesures</object-name>
    <object-name>chute_cap</object-name>
    <object-name>Station1</object-name>
    <object-name>Station2</object-name>
    <object-name>Station3</object-name>
    <object-name>Station4</object-name>
    <object-name>Station5</object-name>
    <object-name>BD3</object-name>
    <object-name>APU-470-L</object-name>
    <object-name>APU-470-R</object-name>
    <object-name>APU-73-L</object-name>
    <object-name>APU-73-R</object-name>
    <object-name>APU-60-L</object-name>
    <object-name>APU-60-R</object-name>
		<property-base>sim/model/livery</property-base>
		<texture-prop>texture</texture-prop>
		<texture>Aircraft/MiG-21UPG/Models/Liveries/Default.png</texture>
	</animation>

  <animation>
    <type>shader</type>
    <shader>chrome</shader>
    <texture>Aircraft/Generic/Effects/glass_shader.png</texture>
    <object-name>MirrorR.M</object-name>
    <object-name>MirrorL.M</object-name>
    <!--<object-name>left_inner_strut2</object-name>
    <object-name>right_inner_strut2</object-name>-->
  </animation>
	
	<animation>
		<type>material</type>
		<object-name>heat</object-name>
		<emission>
			<red>255</red>
			<green>255</green>
			<blue>254</blue>
		</emission>
	</animation>

	<!-- Animations -->

	 <animation>
		 <type>translate</type>
		 <object-name>Pilot</object-name>
		 <object-name>Seat</object-name>
		 <property>controls/eject</property>
		 <factor>20</factor>
		 <center>
			 <x-m>0</x-m>
			 <y-m>0</y-m>
			 <z-m>0</z-m>
		 </center>
		 <axis>
			 <x>0</x>
			 <y>0</y>
			 <z>1</z>
		 </axis>
	 </animation>
	 
	 <animation>
		 <type>select</type>
		 <object-name>canopy_glass</object-name>
		 <object-name>canopy</object-name>
		 <object-name>arch</object-name>
     <object-name>arch_rub</object-name>
		 <condition>
			 <not>
				 <property>controls/eject</property>
			 </not>
		 </condition>
	 </animation>
	
	<animation>
		<type>select</type>
		<object-name>heat</object-name>
		<condition>
			<property>engines/engine[0]/running</property>
			<not>
				<property>fdm/jsbsim/systems/crash-detect/crashed</property>
			</not>
		</condition>
	</animation>
    
	<animation>
		<type>rotate</type>
		<object-name>canopy_glass</object-name>
		<object-name>canopy</object-name>
		<object-name>arch</object-name>
    <object-name>arch_rub</object-name>
    <object-name>MirrorL.Case</object-name>
    <object-name>MirrorL.Rt</object-name>
    <object-name>MirrorL.M</object-name>
    <object-name>MirrorR.Case</object-name>
    <object-name>MirrorR.Rt</object-name>
    <object-name>MirrorR.M</object-name>
    <object-name>MirrorL.K</object-name>
    <object-name>MirrorR.K</object-name>
		<property>canopy/position-norm</property>
		<factor>80.00</factor>
		<axis>
			<x1-m> -3.05</x1-m>
			<y1-m>  0.37</y1-m>
			<z1-m>  0.86</z1-m>
			<x2-m> -3.39</x2-m>
			<y2-m>  0.39</y2-m>
			<z2-m>  0.84</z2-m>
		</axis>
	</animation>

	<animation>
		<type>rotate</type>
		<object-name>central_air_brake</object-name>
		<object-name>abhydro</object-name>
		<property>surface-positions/speedbrake-pos-norm</property>
		<condition>
			<equals>
        <property>sim/weight[4]/selected</property>
        <value>none</value>
			</equals>
		</condition>
		<factor>35.00</factor>
		<axis>
			<x1-m> 0.88</x1-m>
			<y1-m>-0.09</y1-m>
			<z1-m>-0.37</z1-m>
			<x2-m> 0.88</x2-m>
			<y2-m> 0.09</y2-m>
			<z2-m>-0.37</z2-m>
		</axis>
	</animation>

	<animation>
		<type>rotate</type>
		<object-name>right_ventral_air_brake</object-name>
		<object-name>right-abhydro</object-name>
		<property>surface-positions/speedbrake-pos-norm</property>
		<factor>-35.00</factor>
		<axis>
			<x1-m>-2.77</x1-m>
			<y1-m> 0.50</y1-m>
			<z1-m>-0.05</z1-m>
			<x2-m>-2.77</x2-m>
			<y2-m> 0.26</y2-m>
			<z2-m>-0.28</z2-m>
		</axis>
	</animation>

	<animation>
		<type>rotate</type>
		<object-name>left_ventral_air_brake</object-name>
		<object-name>left-abhydro</object-name>
		<property>surface-positions/speedbrake-pos-norm</property>
		<factor>35.00</factor>
		<axis>
			<x1-m>-2.77</x1-m>
			<y1-m>-0.50</y1-m>
			<z1-m>-0.05</z1-m>
			<x2-m>-2.77</x2-m>
			<y2-m>-0.26</y2-m>
			<z2-m>-0.28</z2-m>
		</axis>
	</animation>

	<animation>
		<type>rotate</type>
		<object-name>rudder</object-name>
		<property>controls/flight/rudder</property>
		<factor>25</factor>
		<axis>
			<x1-m>5.19</x1-m>
			<y1-m>0.00</y1-m>
			<z1-m>1.10</z1-m>
			<x2-m>6.69</x2-m>
			<y2-m>0.00</y2-m>
			<z2-m>2.60</z2-m>
		</axis>
	</animation>

	<animation>
		<type>rotate</type>
		<object-name>left_elevator</object-name>
		<object-name>right_elevator</object-name>
		<property>surface-positions/elevator-pos-norm</property>
		<factor>15.00</factor>
		<offset-deg>0.00</offset-deg>   
		<center>
			<x-m>4.99</x-m>
			<y-m>0.00</y-m>
			<z-m>0.30</z-m>
		</center>
		<axis>
			<x>0.00</x>
			<y>1.00</y>
			<z>0.00</z>
		</axis>
	</animation>

	<animation>
		<type>rotate</type>
		<object-name>right_flap</object-name>
		<property>surface-positions/flap-pos-norm</property>
		<factor>30.00</factor>
		<axis>
			<x1-m> 1.98</x1-m>
			<y1-m> 0.65</y1-m>
			<z1-m> 0.14</z1-m>
			<x2-m> 1.98</x2-m>
			<y2-m> 1.99</y2-m>
			<z2-m> 0.09</z2-m>
		</axis>
	</animation>

	<animation>
		<type>rotate</type>
		<object-name>left_flap</object-name>
		<property>surface-positions/flap-pos-norm</property>
		<factor>-30.00</factor>
		<axis>
			<x1-m> 1.98</x1-m>
			<y1-m>-0.65</y1-m>
			<z1-m> 0.14</z1-m>
			<x2-m> 1.98</x2-m>
			<y2-m>-1.99</y2-m>
			<z2-m> 0.09</z2-m>
		</axis>
	</animation>

	<animation>
		<type>rotate</type>
		<object-name>right_aileron</object-name>
		<property>surface-positions/right-aileron-pos-norm</property>
		<factor>-15.00</factor>
		<axis>
			<x1-m> 2.03</x1-m>
			<y1-m> 2.10</y1-m>
			<z1-m> 0.09</z1-m>
			<x2-m> 2.38</x2-m>
			<y2-m> 3.34</y2-m>
			<z2-m> 0.04</z2-m>
		</axis>
	</animation>

	<animation>
		<type>rotate</type>
		<object-name>left_aileron</object-name>
		<property>surface-positions/left-aileron-pos-norm</property>
		<factor>-15.00</factor>
		<axis>
			<x1-m> 2.03</x1-m>
			<y1-m>-2.10</y1-m>
			<z1-m> 0.09</z1-m>
			<x2-m> 2.38</x2-m>
			<y2-m>-3.34</y2-m>
			<z2-m> 0.04</z2-m>
		</axis>
	</animation>

	<animation>
		<type>rotate</type>
		<object-name>right_door</object-name>
		<property>gear/gear[0]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>90</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>90</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m>-5.64</x1-m>
			<y1-m> 0.17</y1-m>
			<z1-m>-0.28</z1-m>
			<x2-m>-4.61</x2-m>
			<y2-m> 0.18</y2-m>
			<z2-m>-0.31</z2-m>
		</axis>
	</animation>

	<animation>
		<type>rotate</type>
		<object-name>right_gill</object-name>
		<property>gear/gear[2]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>30</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>30</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m>-5.73</x1-m>
			<y1-m> 0.55</y1-m>
			<z1-m> 0.22</z1-m>
			<x2-m>-5.73</x2-m>
			<y2-m> 0.52</y2-m>
			<z2-m> 0.06</z2-m>
		</axis>
	</animation>

	<animation>
		<type>rotate</type>
		<object-name>left_gill</object-name>
		<property>gear/gear[1]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>-30</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>-30</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m>-5.73</x1-m>
			<y1-m>-0.55</y1-m>
			<z1-m> 0.22</z1-m>
			<x2-m>-5.73</x2-m>
			<y2-m>-0.52</y2-m>
			<z2-m> 0.06</z2-m>
		</axis>
	</animation>

	<animation>
		<type>rotate</type>
		<object-name>right_back_gill</object-name>
		<property>gear/gear[2]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>30</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>30</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m>-3.40</x1-m>
			<y1-m> 0.60</y1-m>
			<z1-m> 0.12</z1-m>
			<x2-m>-3.40</x2-m>
			<y2-m> 0.54</y2-m>
			<z2-m>-0.05</z2-m>
		</axis>
	</animation>

	<animation>
		<type>rotate</type>
		<object-name>left_back_gill</object-name>
		<property>gear/gear[1]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>-30</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>-30</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m>-3.40</x1-m>
			<y1-m>-0.60</y1-m>
			<z1-m> 0.12</z1-m>
			<x2-m>-3.40</x2-m>
			<y2-m>-0.54</y2-m>
			<z2-m>-0.05</z2-m>
		</axis>
	</animation>

	<animation>
		<type>rotate</type>
		<object-name>left_door</object-name>
		<property>gear/gear[0]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>-90</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>-90</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m>-5.64</x1-m>
			<y1-m>-0.17</y1-m>
			<z1-m>-0.28</z1-m>
			<x2-m>-4.61</x2-m>
			<y2-m>-0.18</y2-m>
			<z2-m>-0.31</z2-m>
		</axis>
	</animation>

	<animation>
		<type>rotate</type>
		<object-name>right_inner_door</object-name>
		<property>gear/gear[2]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>-96</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>-96</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m>-0.64</x1-m>
			<y1-m> 0.18</y1-m>
			<z1-m>-0.36</z1-m>
			<x2-m> 0.54</x2-m>
			<y2-m> 0.18</y2-m>
			<z2-m>-0.37</z2-m>
		</axis>
	</animation>

	<animation>
		<type>rotate</type>
		<object-name>left_inner_door</object-name>
		<property>gear/gear[1]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>96</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>96</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m>-0.64</x1-m>
			<y1-m>-0.18</y1-m>
			<z1-m>-0.36</z1-m>
			<x2-m> 0.54</x2-m>
			<y2-m>-0.18</y2-m>
			<z2-m>-0.37</z2-m>
		</axis>
	</animation>

	<animation>
		<type>select</type>
		<object-name>nose_wheel</object-name>
		<object-name>front_strut</object-name>
		<object-name>frontd_strut</object-name>
		<condition>
			<greater-than>
				<property>gear/gear[0]/position-norm</property>
				<value>0</value>
			</greater-than>
		</condition>
	</animation>

	<animation>
		<type>select</type>
		<object-name>right_strut</object-name>
		<object-name>left_strut</object-name>
		<object-name>right_wheel</object-name>
		<object-name>left_wheel</object-name>
		<object-name>rightd_strut</object-name>
		<object-name>leftd_strut</object-name>
		<object-name>right_scissor</object-name>
		<object-name>left_scissor</object-name>
		<object-name>right_inner_strut</object-name>
		<object-name>left_inner_strut</object-name>
		<condition>
			<greater-than>
				<property>gear/gear[0]/position-norm</property>
				<value>0.15</value>
			</greater-than>
		</condition>
	</animation>

	<animation>
		<type>rotate</type>
		<object-name>nose_wheel</object-name>
		<object-name>front_strut</object-name>
		<object-name>frontd_strut</object-name>
		<property>gear/gear[0]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>-110</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>-110</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>0</dep>
			</entry>
		</interpolation>
		<center>
			<x-m>-4.43</x-m>
			<y-m> 0.00</y-m>
			<z-m> 0.00</z-m>
		</center>
		<axis>
			<x> 0</x>
			<y>-1</y>
			<z> 0</z>
		</axis>
	</animation>

	<animation>
		<type>rotate</type>
		<object-name>nose_wheel</object-name>
		<object-name>front_strut</object-name>
		<object-name>frontd_strut</object-name>
		<property>surface-positions/rudder-pos-norm</property>
		<factor>25</factor>
		<center>
			<x-m>-4.43</x-m>
			<y-m> 0.00</y-m>
			<z-m> 0.04</z-m>
		</center>
		<axis>
			<x>0.0</x>
			<y>0.0</y>
			<z>1.0</z>
		</axis>
	</animation>

	<animation>
		<type>rotate</type>
		<object-name>right_strut</object-name>
		<object-name>rightd_strut</object-name>
		<object-name>right_scissor</object-name>
		<object-name>right_wheel</object-name>
		<object-name>right_inner_strut</object-name>
		<property>gear/gear[2]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>92</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>92</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>0</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m> 0.66</x1-m>
			<y1-m> 1.59</y1-m>
			<z1-m> 0.11</z1-m>
			<x2-m> 0.50</x2-m>
			<y2-m> 1.75</y2-m>
			<z2-m> 0.11</z2-m>
		</axis>
	</animation>

  <animation>
    <type>translate</type>
    <object-name>right_outer_door_up</object-name>
    <object-name>right_outer_door_down</object-name>
    <property>gear/gear[2]/position-norm</property>
    <interpolation>
      <entry>
        <ind>0.0</ind>
        <dep>0</dep>
      </entry>
      <entry>
        <ind>0.5</ind>
        <dep>0</dep>
      </entry>
      <entry>
        <ind>1.0</ind>
        <dep>0.10</dep>
      </entry>
    </interpolation>
    <axis>
      <x>0</x>
      <y>0</y>
      <z>1</z>
    </axis>
  </animation>

	<animation>
		<type>rotate</type>
		<object-name>right_outer_door_up</object-name>
		<object-name>right_outer_door_down</object-name>
		<property>gear/gear[2]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>-92</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m> 0.75</x1-m>
			<y1-m> 1.72</y1-m>
			<z1-m> 0.08</z1-m>
			<x2-m> 0.60</x2-m>
			<y2-m> 1.87</y2-m>
			<z2-m> 0.08</z2-m>
		</axis>
	</animation>
    
	<animation>
		<type>rotate</type>
		<object-name>right_outer_door_up</object-name>
		<object-name>right_outer_door_down</object-name>
		<property>gear/gear[2]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>-25</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m> 0.46</x1-m>
			<y1-m> 1.54</y1-m>
			<z1-m> 0.05</z1-m>
			<x2-m> 0.10</x2-m>
			<y2-m> 1.15</y2-m>
			<z2-m> 0.05</z2-m>
		</axis>
	</animation>

	<animation>
		<type>rotate</type>
		<object-name>right_outer_door_down</object-name>
		<property>gear/gear[2]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>-48</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>-48</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m>-0.01</x1-m>
			<y1-m> 0.86</y1-m>
			<z1-m> 0.08</z1-m>
			<x2-m>-0.16</x2-m>
			<y2-m> 1.01</y2-m>
			<z2-m> 0.08</z2-m>
		</axis>
	</animation>

  <animation>
    <type>translate</type>
    <object-name>left_outer_door_up</object-name>
    <object-name>left_outer_door_down</object-name>
    <property>gear/gear[1]/position-norm</property>
    <interpolation>
      <entry>
        <ind>0.0</ind>
        <dep>0</dep>
      </entry>
      <entry>
        <ind>0.5</ind>
        <dep>0</dep>
      </entry>
      <entry>
        <ind>1.0</ind>
        <dep>0.10</dep>
      </entry>
    </interpolation>
    <axis>
      <x>0</x>
      <y>0</y>
      <z>1</z>
    </axis>
  </animation>

	<animation>
		<type>rotate</type>
		<object-name>left_outer_door_up</object-name>
		<object-name>left_outer_door_down</object-name>
		<property>gear/gear[1]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>92</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m> 0.75</x1-m>
			<y1-m>-1.72</y1-m>
			<z1-m> 0.08</z1-m>
			<x2-m> 0.60</x2-m>
			<y2-m>-1.87</y2-m>
			<z2-m> 0.08</z2-m>
		</axis>
	</animation>
    
	<animation>
		<type>rotate</type>
		<object-name>left_outer_door_up</object-name>
		<object-name>left_outer_door_down</object-name>
		<property>gear/gear[1]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>25</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m> 0.46</x1-m>
			<y1-m>-1.54</y1-m>
			<z1-m> 0.05</z1-m>
			<x2-m> 0.10</x2-m>
			<y2-m>-1.15</y2-m>
			<z2-m> 0.05</z2-m>
		</axis>
	</animation>

	<animation>
		<type>rotate</type>
		<object-name>left_outer_door_down</object-name>
		<property>gear/gear[1]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>48</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>48</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m>-0.01</x1-m>
			<y1-m>-0.86</y1-m>
			<z1-m> 0.08</z1-m>
			<x2-m>-0.16</x2-m>
			<y2-m>-1.01</y2-m>
			<z2-m> 0.08</z2-m>
		</axis>
	</animation>

	<animation>
		<type>rotate</type>
		<object-name>right_inner_strut</object-name>
		<property>gear/gear[2]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>-125</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>-125</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>0</dep>
			</entry>
		</interpolation>
		<axis>   
			<x1-m> 0.66</x1-m>
			<y1-m> 1.59</y1-m>
			<z1-m>-0.19</z1-m>
			<x2-m> 0.50</x2-m>
			<y2-m> 1.75</y2-m>
			<z2-m>-0.19</z2-m>
		</axis>
	</animation>

	<animation>
		<type>translate</type>
		<object-name>rightd_strut</object-name>
		<object-name>right_wheel</object-name>
		<property>gear/gear[2]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>-0.45</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>-0.45</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>0</dep>
			</entry>
		</interpolation>
		<axis>
			<x>0</x>
			<y>0</y>
			<z>1</z>
		</axis>
	</animation>

	<animation>
		<type>rotate</type>
		<object-name>right_wheel</object-name>
		<property>gear/gear[2]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>92</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>92</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>0</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m> 0.60</x1-m>
			<y1-m> 1.69</y1-m>
			<z1-m>-0.95</z1-m>
			<x2-m> 0.68</x2-m>
			<y2-m> 1.59</y2-m>
			<z2-m>-0.95</z2-m>
		</axis>
	</animation>

	<animation>
		<type>rotate</type>
		<object-name>left_strut</object-name>
		<object-name>leftd_strut</object-name>
		<object-name>left_scissor</object-name>
		<object-name>left_wheel</object-name>
		<object-name>left_inner_strut</object-name>
		<property>gear/gear[1]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>-92</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>-92</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>0</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m> 0.66</x1-m>
			<y1-m>-1.59</y1-m>
			<z1-m> 0.11</z1-m>
			<x2-m> 0.50</x2-m>
			<y2-m>-1.75</y2-m>
			<z2-m> 0.11</z2-m>
		</axis>
	</animation>

	<animation>
		<type>rotate</type>
		<object-name>left_inner_strut</object-name>
		<property>gear/gear[1]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>125</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>125</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>0</dep>
			</entry>
		</interpolation>
		<axis>   
			<x1-m> 0.66</x1-m>
			<y1-m>-1.59</y1-m>
			<z1-m>-0.19</z1-m>
			<x2-m> 0.50</x2-m>
			<y2-m>-1.75</y2-m>
			<z2-m>-0.19</z2-m>
		</axis>
	</animation>

	<animation>
		<type>translate</type>
		<object-name>leftd_strut</object-name>
		<object-name>left_wheel</object-name>
		<property>gear/gear[1]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>-0.45</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>-0.45</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>0</dep>
			</entry>
		</interpolation>
		<axis>
			<x>0</x>
			<y>0</y>
			<z>1</z>
		</axis>
	</animation>

	<animation>
		<type>rotate</type>
		<object-name>left_wheel</object-name>
		<property>gear/gear[1]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>-92</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>-92</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>0</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m> 0.60</x1-m>
			<y1-m>-1.69</y1-m>
			<z1-m>-0.95</z1-m>
			<x2-m> 0.68</x2-m>
			<y2-m>-1.59</y2-m>
			<z2-m>-0.95</z2-m>
		</axis>
	</animation>

	<animation>
		<type>rotate</type>
		<object-name>nose_wheel</object-name>
		<object-name>frontd_strut</object-name>
		<property>gear/gear[0]/compression-norm[0]</property>
		<factor>100</factor>
		<center>
			<x-m>-4.44</x-m>
			<y-m>0</y-m>
			<z-m>-0.92</z-m>
		</center>
		<axis>
			<x>0</x>
			<y>-1</y>
			<z>0</z>
		</axis>
	</animation>

	<animation>
		<type>translate</type>
		<object-name>rightd_strut</object-name>
		<object-name>right_scissor</object-name>
		<object-name>right_wheel</object-name>
		<property>gear/gear[2]/compression-norm[0]</property>
		<factor>0.3</factor>
		<axis>
			<x>0</x>
			<y>0</y>
			<z>-1</z>
		</axis>
	</animation>

	<animation>
		<type>translate</type>
		<object-name>leftd_strut</object-name>
		<object-name>left_scissor</object-name>
		<object-name>left_wheel</object-name>
		<property>gear/gear[1]/compression-norm[0]</property>
		<factor>0.3</factor>
		<axis>
			<x>0</x>
			<y>0</y>
			<z>-1</z>
		</axis>
	</animation>

  <animation>
    <type>translate</type>
    <object-name>cone</object-name>
    <property>/instrumentation/airspeed-indicator/indicated-mach</property>
    <condition>
      <property>controls/power/cone</property>
    </condition>
    <interpolation> 
      <entry><ind>0</ind><dep>-0.2</dep></entry>
      <entry><ind>0.2</ind><dep>-0.16</dep></entry>
      <entry><ind>1.4</ind><dep>-0.12</dep></entry>
      <entry><ind>1.6</ind><dep>-0.08</dep></entry>
      <entry><ind>1.7</ind><dep>-0.04</dep></entry>
      <entry><ind>1.8</ind><dep>0</dep></entry>
    </interpolation>
    <axis>
      <x>-1</x>
      <y>0</y>
      <z>0</z>
    </axis>
  </animation>

  <animation>
    <type>translate</type>
    <object-name>nozzle_in_2</object-name>
    <property>/engines/engine/n2</property>
    <interpolation>
      <entry><ind> 60 </ind><dep> 0 </dep></entry>
      <entry><ind> 80 </ind><dep>-0.22 </dep></entry>
      <entry><ind> 88 </ind><dep>-0.165 </dep></entry>
      <entry><ind> 90 </ind><dep> 0 </dep></entry>
    </interpolation>
    <axis>
      <x> 1 </x>
      <y> 0 </y>
      <z> 0 </z>
    </axis>
  </animation>

  <animation>
    <type>select</type>
    <object-name>chute_cap</object-name>
    <condition>
      <property>controls/flight/chute_loaded</property>
    </condition>
  </animation>
	
</PropertyList>